// Generated by CoffeeScript 1.7.1
(function() {
  var MyCoins, fakeData, onResizeWindow, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MyCoins = {
    Views: {},
    Collections: {},
    Models: {},
    Routers: {}
  };

  MyCoins.Config = (function(_super) {
    __extends(Config, _super);

    function Config() {
      return Config.__super__.constructor.apply(this, arguments);
    }

    Config.prototype.localStorage = new Backbone.LocalStorage('MyCoins.config');

    Config.prototype.defaults = {
      accounts: {
        filter: "all",
        sort: "desc"
      }
    };

    Config.prototype.initialize = function() {};

    return Config;

  })(Backbone.DeepModel);

  MyCoins.config = new MyCoins.Config;

  MyCoins.config.fetch();

  onResizeWindow = function(fn) {
    var addEvent;
    addEvent = function(elem, type, eventHandle) {
      if (elem === null || typeof elem === 'undefined') {
        return;
      }
      if (elem.addEventListener) {
        return elem.addEventListener(type, eventHandle, false);
      } else if (elem.attachEvent) {
        return elem.attachEvent("on" + type, eventHandle);
      } else {
        return elem["on" + type] = eventHandle;
      }
    };
    return addEvent(window, "resize", fn);
  };

  (_base = MyCoins.Views).Sidebar || (_base.Sidebar = {});

  MyCoins.Views.Sidebar.AccountView = (function(_super) {
    __extends(AccountView, _super);

    function AccountView() {
      return AccountView.__super__.constructor.apply(this, arguments);
    }

    AccountView.prototype.tagName = "li";

    AccountView.prototype.template = "<a href=\"#\"><span class=\"name\"></span><span class=\"balance\"></span>";

    AccountView.prototype.events = {
      "click": "accountClicked"
    };

    AccountView.prototype.initialize = function(options) {
      return MyCoins.transactionsCollection.on("add remove change reset", (function(_this) {
        return function() {
          return _this.updateBalanceText();
        };
      })(this));
    };

    AccountView.prototype.accountClicked = function(ev) {
      $(".account-item").removeClass("active");
      return $(ev.target).closest(".account-item").addClass("active");
    };

    AccountView.prototype.updateBalanceText = function() {
      var balance;
      balance = this.model.balance();
      return this.$(".balance").text(balance.format() + " " + this.model.get("currency"));
    };

    AccountView.prototype.render = function() {
      this.$el.append(this.template);
      this.$el.addClass("account-item");
      this.$el.attr("data-account-id", this.model.get("id"));
      this.$(".name").text(this.model.get("name"));
      this.$(".balance").text(Number(this.model.balance()).format() + " " + this.model.get("currency"));
      this.$("a").attr('href', "account/" + this.model.get("id") + "/show");
      return this;
    };

    return AccountView;

  })(Backbone.View);

  (_base1 = MyCoins.Views).Sidebar || (_base1.Sidebar = {});

  MyCoins.Views.Sidebar.ShowView = (function(_super) {
    __extends(ShowView, _super);

    function ShowView() {
      return ShowView.__super__.constructor.apply(this, arguments);
    }

    ShowView.prototype.template = "<ul id=\"app-sidebar-nav\" class=\"sidebar-nav nav\">\n  <li id=\"sidebar-accounts\" class=\"sidebar-item\">\n    <a href=\"#sidebar-accounts\">\n      <i class=\"fa fa-university\"></i>\n      <span>Accounts</span>\n    </a>\n    <div id=\"sidebar-accounts-nav-wrapper\">\n    <ul id=\"sidebar-accounts-nav\" class=\"nav sub-nav\"></ul>\n    </div>\n  </li>\n  <li id=\"sidebar-budgets\" class=\"sidebar-item\">\n    <a href=\"#sidebar-budgets\">\n      <i class=\"fa fa-money\"></i>\n      <span>Budgets</span>\n    </a>\n    <div id=\"sidebar-budgets-nav-wrapper\">\n      <ul id=\"sidebar-budgets-nav\" class=\"nav sub-nav\"></ul>\n    </div>\n  </li>\n  <li id=\"sidebar-scheduled\" class=\"sidebar-item\">\n    <a href=\"#sidebar-scheduled\">\n      <i class=\"fa fa-clock-o\"></i>\n      <span>Scheduled</span>\n    </a>\n    <ul id=\"sidebar-scheduled-nav\" class=\"nav sub-nav\"></ul>\n  </li>\n  <li id=\"sidebar-reports\" class=\"sidebar-item\">\n    <a href=\"#sidebar-reports\">\n      <i class=\"fa fa-bar-chart\"></i>\n      <span>Reports</span>\n    </a>\n    <ul id=\"sidebar-reports-nav\" class=\"nav sub-nav\"></ul>\n  </li>\n</ul>\n<footer id=\"app-sidebar-footer\">\n  <div id=\"app-sidebar-footer-new-group\" class=\"btn-group dropup\">\n    <button type=\"button\" class=\"btn btn-default\"><span class=\"fa fa-plus\"></span><span class=\"sr-only\">List View</span></button>\n    <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n      <span class=\"caret\"></span>\n      <span class=\"sr-only\">List View</span>\n    </button>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li id=\"app-sidebar-footer-new-account\"><a href=\"#\">New Account</a></li>\n      <li id=\"app-sidebar-footer-new-budget\"><a href=\"#\">New Budget</a></li>\n    </ul>\n  </div>\n</footer>";

    ShowView.prototype.events = {
      "click .sidebar-item": "sidebarItemClicked",
      "click #app-sidebar-footer-new-group .btn": "toggleNewPopup",
      "click #app-sidebar-footer-new-account": "newAccount",
      "click #app-sidebar-footer-new-budget": "newBudget"
    };

    ShowView.prototype.initialize = function(options) {
      MyCoins.accountsCollection.on("add", (function(_this) {
        return function(account) {
          return _this.addAccount(account);
        };
      })(this));
      MyCoins.accountsCollection.on("reset", (function(_this) {
        return function(collection) {
          return collection.each(function(account) {
            return _this.addAccount(account);
          });
        };
      })(this));
      return MyCoins.accountsCollection.fetch({
        reset: true
      });
    };

    ShowView.prototype.newAccount = function(ev) {
      this.newAccountModalView = new MyCoins.Views.Accounts.NewModalView;
      MyCoins.setCurrentModalView(this.newAccountModalView);
      return this.newAccountModalView.show();
    };

    ShowView.prototype.newBudget = function(ev) {
      this.newBudgetModalView = new MyCoins.Views.Budgets.NewBudgetModalView;
      MyCoins.setCurrentModalView(this.newBudgetModalView);
      return this.newBudgetModalView.show();
    };

    ShowView.prototype.toggleNewPopup = function(ev) {
      ev.stopPropagation();
      return this.$("#app-sidebar-footer-new-group").toggleClass("open");
    };

    ShowView.prototype.sidebarItemClicked = function(ev) {
      this.$el.find(".sidebar-item").removeClass("active");
      return $(ev.target).closest(".sidebar-item").addClass("active");
    };

    ShowView.prototype.addAccount = function(accountModel) {
      var account;
      account = new MyCoins.Views.Sidebar.AccountView({
        model: accountModel
      });
      return this.$("#sidebar-accounts-nav").append(account.render().el);
    };

    ShowView.prototype.render = function() {
      this.$el.append(this.template);
      $("body").on("click", (function(_this) {
        return function(ev) {
          return _this.$(".btn-group").removeClass("open");
        };
      })(this));
      this.$el.find("#sidebar-accounts").addClass("active");
      MyCoins.accountsCollection.each((function(_this) {
        return function(account) {
          return _this.addAccount(account);
        };
      })(this));
      this.$(".account-item").first().addClass("active");
      return this;
    };

    return ShowView;

  })(Backbone.View);

  (_base2 = MyCoins.Views).Accounts || (_base2.Accounts = {});

  MyCoins.Views.Accounts.NewView = (function(_super) {
    __extends(NewView, _super);

    function NewView() {
      return NewView.__super__.constructor.apply(this, arguments);
    }

    NewView.prototype.template = "<article id=\"new-account-article\">\n  <div class=\"box\">\n    <p>First, start creating a new account (the place where incomes and expenses go)<p>\n    <button id=\"new-account-btn\" class=\"btn btn-default\">New Account</button>\n  </div>\n</article>";

    NewView.prototype.events = {
      "click #new-account-btn": "newAccount"
    };

    NewView.prototype.initialize = function(options) {
      return MyCoins.currentView = this;
    };

    NewView.prototype.newAccount = function(ev) {
      this.newModalAccountView = new MyCoins.Views.Accounts.NewModalView;
      MyCoins.setCurrentModalView(this.newModalAccountView);
      return this.newModalAccountView.show();
    };

    NewView.prototype.render = function() {
      $("#my-coins-app").attr("data-content-view", "accounts:new");
      this.$el.append(this.template);
      this.$el.find("#new-modal-account").hide();
      return this;
    };

    return NewView;

  })(Backbone.View);

  (_base3 = MyCoins.Views).Accounts || (_base3.Accounts = {});

  MyCoins.Views.Accounts.NewModalView = (function(_super) {
    __extends(NewModalView, _super);

    function NewModalView() {
      return NewModalView.__super__.constructor.apply(this, arguments);
    }

    NewModalView.prototype.template = "<article id=\"new-modal-account-article\" class=\"my-coins-modal\">\n  <header>Select Account Type</header>\n  <div class=\"box\">\n    <div class=\"row\">\n      <input id=\"new-modal-account-name-input\" placeholder=\"Account Name\" type=\"text\">\n    </div>\n\n    <div class=\"row\">\n      <button id=\"new-modal-account-cash-btn\" class=\"btn btn-default\">Cash Account</button>\n    </div>\n\n    <div class=\"row\">\n      <button id=\"new-modal-account-checking-btn\" class=\"btn btn-default\">Checking Account</button>\n    </div>\n\n    <div class=\"row\">\n      <button id=\"new-modal-account-credit-btn\" class=\"btn btn-default\">Credit Account</button>\n    </div>\n\n    <div class=\"row\">\n      <button id=\"new-modal-account-savings-btn\" class=\"btn btn-default\">Savings Account</button>\n    </div>\n  </div>\n  <footer><button id=\"new-modal-account-cancel-btn\" class=\"btn btn-default\">Cancel</button></footer>\n</article>";

    NewModalView.prototype.events = {
      "click #new-modal-account-checking-btn": "newCheckingAccount",
      "click #new-modal-account-cash-btn": "newCashAccount",
      "click #new-modal-account-credit-btn": "newCreditAccount",
      "click #new-modal-account-savings-btn": "newSavingsAccount",
      "click #new-modal-account-cancel-btn": "hide"
    };

    NewModalView.prototype.newAccount = function(type) {
      var $name, name;
      $name = this.$("#new-modal-account-name-input");
      name = $name.val().trim();
      $name.removeClass("error");
      if (name === "") {
        return $name.addClass("error");
      } else {
        this.collection.create({
          name: name,
          type: type
        });
        return this.hide();
      }
    };

    NewModalView.prototype.newCashAccount = function(ev) {
      return this.newAccount("cash");
    };

    NewModalView.prototype.newCheckingAccount = function(ev) {
      return this.newAccount("checking");
    };

    NewModalView.prototype.newCreditAccount = function(ev) {
      return this.newAccount("credit");
    };

    NewModalView.prototype.newSavingsAccount = function(ev) {
      return this.newAccount("savings");
    };

    NewModalView.prototype.initialize = function(options) {
      this.collection = MyCoins.accountsCollection;
      return this.collection.on("add", function(account) {
        return Backbone.history.navigate("account/" + account.get("id") + "/show", true);
      });
    };

    NewModalView.prototype.show = function() {
      return $("#app-modal").fadeIn();
    };

    NewModalView.prototype.hide = function() {
      return $("#app-modal").fadeOut();
    };

    NewModalView.prototype.render = function() {
      this.$el.append(this.template);
      return this;
    };

    return NewModalView;

  })(Backbone.View);

  (_base4 = MyCoins.Views).Accounts || (_base4.Accounts = {});

  MyCoins.Views.Accounts.ShowView = (function(_super) {
    __extends(ShowView, _super);

    function ShowView() {
      this.addTransaction = __bind(this.addTransaction, this);
      return ShowView.__super__.constructor.apply(this, arguments);
    }

    ShowView.prototype.template = "<article id=\"show-account\">\n  <header id=\"show-account-header\">\n    <div id=\"show-account-header-btn-group-1\" class=\"btn-group\">\n      <button id=\"show-account-header-sort-btn\" type=\"button\" class=\"btn btn-default\">Sort <span class=\"fa fa-long-arrow-down\"></span></button>\n      <button id=\"show-account-header-filters-btn\" type=\"button\" class=\"btn btn-default\" data-placement=\"bottom\">Filters</button>\n      <div id=\"show-account-header-filters-btn-popover-content\" style=\"display: none;\">\n        <div class=\"input-group\">\n          <span class=\"input-group-addon\">Type</span>\n          <div class=\"btn-group\">\n            <button id=\"show-account-header-filters-btn-all\" data-filter=\"all\" type=\"button\" class=\"btn btn-default\">All</button>\n            <button id=\"show-account-header-filters-btn-income\" data-filter=\"income\" type=\"button\" class=\"btn btn-default\">Income</button>\n            <button id=\"show-account-header-filters-btn-expense\" data-filter=\"expense\" type=\"button\" class=\"btn btn-default\">Expense</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div id=\"show-account-header-btn-group-3\" class=\"btn-group\">\n      <span class=\"fa fa-search\"></span>\n      <span class=\"caret\"></span>\n      <input id=\"show-account-header-search-input\" type=\"text\">\n    </div>\n\n    <div id=\"show-account-header-btn-group-2\" class=\"btn-group\">\n      <button id=\"show-account-header-list-btn\" type=\"button\" class=\"btn btn-default\"><span class=\"fa fa-list\"></span><span class=\"sr-only\">List View</span></button>\n      <button id=\"show-account-header-table-btn\" type=\"button\" class=\"btn btn-default\"><span class=\"fa fa-table\"></span><span class=\"sr-only\">Table View</span></button>\n    </div>\n\n  </header>\n\n  <div id=\"show-account-content\">\n    <ul id=\"show-account-transactions-list\" class=\"nav\"></ul>\n  </div>\n\n  <footer id=\"show-account-footer\">\n    <div id=\"show-account-footer-balance\">\n      <span class=\"balance-text\">Balance</span>\n      <span class=\"balance-value\">0,00 NZD</span>\n    </div>\n\n    <div id=\"show-account-footer-new-group\" class=\"btn-group dropup\">\n      <button type=\"button\" class=\"btn btn-default\"><span class=\"fa fa-plus\"></span><span class=\"sr-only\">Add new transaction</span></button>\n      <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n        <span class=\"caret\"></span>\n        <span class=\"sr-only\">Add new transaction</span>\n      </button>\n      <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n        <li id=\"show-account-footer-new-expense\"><span>New Expense</span></li>\n        <li id=\"show-account-footer-new-income\"><span>New Income</span></li>\n      </ul>\n    </div>\n\n  </footer>\n</article>";

    ShowView.prototype.templateLabel = "<li class=\"label-list-item\">\n  <span class=\"label-title-wrapper\">\n	      <i class=\"fa fa-calendar\"></i>\n    <span class=\"title\"></span>\n  </span>\n  <span class=\"balance\">Total Balance:<span class=\"value\"></span></span>\n  <span class=\"monthly-balance\">Monthly Balance:<span class=\"value\"></span> |</span>\n</li>";

    ShowView.prototype.events = {
      "keyup #show-account-header-search-input": "keyupSearch",
      "click #show-account-footer-new-group .btn": "toggleNewPopup",
      "click #show-account-header-sort-btn": "toggleSort",
      "click #show-account-header-btn-group-1 [data-filter]": "setFilter",
      "click #show-account-footer-new-expense": "newExpense",
      "click #show-account-footer-new-income": "newIncome"
    };

    ShowView.prototype.transactions = [];

    ShowView.prototype.searchWord = "";

    ShowView.prototype.keyupSearch = function(ev) {
      this.searchWord = $(ev.target).val().trim();
      return this.addTransactions();
    };

    ShowView.prototype.newExpense = function(ev) {
      this.newExpenseModalView = new MyCoins.Views.Transactions.NewTransactionModalView({
        accountId: this.model.get("id")
      });
      MyCoins.setCurrentModalView(this.newExpenseModalView);
      return this.newExpenseModalView.show();
    };

    ShowView.prototype.newIncome = function(ev) {
      this.newIncomeModalView = new MyCoins.Views.Transactions.NewTransactionModalView({
        accountId: this.model.get("id"),
        type: "income"
      });
      MyCoins.setCurrentModalView(this.newIncomeModalView);
      return this.newIncomeModalView.show();
    };

    ShowView.prototype.toggleNewPopup = function(ev) {
      ev.stopPropagation();
      return this.$("#show-account-footer-new-group").toggleClass("open");
    };

    ShowView.prototype.toggleSort = function(ev) {
      ev.stopPropagation();
      if (this.$("#show-account-header-sort-btn .fa").hasClass("fa-long-arrow-down")) {
        this.$("#show-account-header-sort-btn .fa").removeClass("fa-long-arrow-down");
        this.$("#show-account-header-sort-btn .fa").addClass("fa-long-arrow-up");
        this.$("#show-account-header-sort-btn").attr("data-order", "asc");
        MyCoins.config.set("accounts.sort", "asc");
      } else {
        this.$("#show-account-header-sort-btn .fa").removeClass("fa-long-arrow-up");
        this.$("#show-account-header-sort-btn .fa").addClass("fa-long-arrow-down");
        this.$("#show-account-header-sort-btn").attr("data-order", "desc");
        MyCoins.config.set("accounts.sort", "desc");
      }
      MyCoins.config.save();
      MyCoins.config.fetch();
      return this.addTransactions();
    };

    ShowView.prototype.addTransaction = function(transaction) {
      this.transactions.push(new MyCoins.Views.Transactions.TransactionView({
        model: transaction
      }));
      return this.$("#show-account-transactions-list").prepend(this.transactions.last().render().el);
    };

    ShowView.prototype.addTransactions = function() {
      var balance, filter, filteredGroup, groupedTrasactions, idx, totalBalances, totalBalancesIndex, transactionsCollection;
      this.transactions.each(function(t) {
        t.off();
        return t.remove();
      });
      this.$("#show-account-transactions-list li").off();
      this.$("#show-account-transactions-list li").remove();
      transactionsCollection = MyCoins.transactionsCollection.sortBy("date");
      totalBalances = [];
      filter = MyCoins.config.get("accounts").filter;
      filteredGroup = {};
      groupedTrasactions = _.groupBy(transactionsCollection, function(transaction) {
        return Date.create(transaction.get("date")).format("{Month}");
      });
      _.each(groupedTrasactions, (function(_this) {
        return function(group, key) {
          return filteredGroup[key] = _.filter(group, function(transaction) {
            if (_this.searchWord.length < 3) {
              return (filter === "all" || transaction.get("type") === filter) && (transaction.get("accountId") === _this.model.get("id"));
            } else {
              return (filter === "all" || transaction.get("type") === filter) && (transaction.get("accountId") === _this.model.get("id")) && (transaction.get("description").toLowerCase().search(_this.searchWord.toLowerCase()) !== -1);
            }
          });
        };
      })(this));
      idx = 0;
      _.each(filteredGroup, (function(_this) {
        return function(group, key) {
          if (idx === 0) {
            totalBalances[idx] = 0;
          } else {
            totalBalances[idx] = totalBalances[idx - 1];
          }
          group.each(function(transaction) {
            if (filter === "income") {
              return totalBalances[idx] += transaction.get("value");
            } else if (filter === "expense") {
              return totalBalances[idx] -= transaction.get("value");
            } else if (filter === "all") {
              if (transaction.get("type") === "income") {
                return totalBalances[idx] += transaction.get("value");
              } else {
                return totalBalances[idx] -= transaction.get("value");
              }
            }
          });
          return idx++;
        };
      })(this));
      filteredGroup = {};
      if (this.$("#show-account-header-sort-btn").attr("data-order") === "asc") {
        totalBalances = totalBalances.reverse();
        transactionsCollection = transactionsCollection.reverse();
      }
      groupedTrasactions = _.groupBy(transactionsCollection, function(transaction) {
        return Date.create(transaction.get("date")).format("{Month}");
      });
      _.each(groupedTrasactions, (function(_this) {
        return function(group, key) {
          return filteredGroup[key] = _.filter(group, function(transaction) {
            if (_this.searchWord.length < 3) {
              return (filter === "all" || transaction.get("type") === filter) && (transaction.get("accountId") === _this.model.get("id"));
            } else {
              return (filter === "all" || transaction.get("type") === filter) && (transaction.get("accountId") === _this.model.get("id")) && (transaction.get("description").toLowerCase().search(_this.searchWord.toLowerCase()) !== -1);
            }
          });
        };
      })(this));
      balance = 0;
      totalBalancesIndex = 0;
      return _.each(filteredGroup, (function(_this) {
        return function(group, key) {
          var footerBalance, monthlyBalance;
          monthlyBalance = 0;
          group.each(function(transaction, idx) {
            if (filter === "income") {
              monthlyBalance += transaction.get("value");
            } else if (filter === "expense") {
              monthlyBalance -= transaction.get("value");
            } else if (filter === "all") {
              if (transaction.get("type") === "income") {
                monthlyBalance += transaction.get("value");
              } else {
                monthlyBalance -= transaction.get("value");
              }
            }
            _this.addTransaction(transaction);
            if ((transaction.get("accountId") === _this.model.get("id")) && (idx === group.length - 1)) {
              return _this.addMonthLabel(key, totalBalances[totalBalancesIndex]);
            }
          });
          _this.$(".label-list-item .monthly-balance .value").first().text(monthlyBalance.format() + " " + MyCoins.transactionsCollection.currency());
          if (monthlyBalance < 0) {
            _this.$(".label-list-item .monthly-balance").first().addClass("negative-balance");
          }
          _this.$(".label-list-item .balance .value").first().text(totalBalances[totalBalancesIndex].format() + " " + MyCoins.transactionsCollection.currency());
          if (balance < 0) {
            _this.$(".label-list-item .balance").first().addClass("negative-balance");
          }
          footerBalance = 0;
          MyCoins.transactionsCollection.each(function(transaction, idx) {
            if (transaction.get("accountId") === _this.model.get("id")) {
              if (transaction.get("type") === "income") {
                return footerBalance += transaction.get("value");
              } else if (transaction.get("type") === "expense") {
                return footerBalance -= transaction.get("value");
              }
            }
          });
          _this.$("#show-account-footer-balance .balance-value").text(footerBalance.format() + " " + MyCoins.transactionsCollection.currency());
          return totalBalancesIndex++;
        };
      })(this));
    };

    ShowView.prototype.initialize = function(options) {
      return MyCoins.transactionsCollection.on("add remove change change", (function(_this) {
        return function() {
          return _this.addTransactions();
        };
      })(this));
    };

    ShowView.prototype.addMonthLabel = function(month) {
      this.$("#show-account-transactions-list").prepend(this.templateLabel);
      return this.$(".label-list-item .title").first().text(month);
    };

    ShowView.prototype.setFilter = function(ev) {
      var accountsConfig, filter;
      filter = $(ev.target).closest(".btn").attr("data-filter");
      accountsConfig = MyCoins.config.get("accounts");
      accountsConfig.filter = filter;
      MyCoins.config.set("accounts", accountsConfig);
      MyCoins.config.save();
      this.$("#show-account-header-btn-group-1 .btn").removeClass("active");
      this.$("#show-account-header-btn-group-1 .btn[data-filter=" + filter + "]").addClass("active");
      return MyCoins.transactionsCollection.trigger("change");
    };

    ShowView.prototype.render = function() {
      this.$el.append(this.template);
      this.$el.find("#new-modal-account").hide();
      this.$("#show-account-header-btn-group-1 [data-filter=" + MyCoins.config.get("accounts").filter + "]").click();
      this.$("#show-account-header-sort-btn").attr("data-order", MyCoins.config.get("accounts").sort);
      this.$("#show-account-header-list-btn").addClass("active");
      this.$("#show-account-header-table-btn").click(function() {
        return alert("Not implemented yet :)");
      });
      this.$("#show-account-header-filters-btn").popover({
        html: true,
        content: (function(_this) {
          return function() {
            return _this.$("#show-account-header-filters-btn-popover-content").html();
          };
        })(this)
      });
      this.addTransactions();
      return this;
    };

    return ShowView;

  })(Backbone.View);

  (_base5 = MyCoins.Views).Transactions || (_base5.Transactions = {});

  MyCoins.Views.Transactions.TransactionView = (function(_super) {
    __extends(TransactionView, _super);

    function TransactionView() {
      return TransactionView.__super__.constructor.apply(this, arguments);
    }

    TransactionView.prototype.tagName = "li";

    TransactionView.prototype.template = "<div class=\"body\">\n  <span class=\"fa paid paid-check\"></span>\n  <span class=\"description\"></span>\n  <span class=\"value\"></span>\n  <span class=\"date\"><i class=\"fa fa-calendar\"></i><span class=\"text\"></span></span>\n  <span class=\"type\"></span>\n</div>\n\n<aside>\n  <div class=\"btn-group\">\n    <button type=\"button\" class=\"btn btn-default btn-edit\"><span class=\"fa fa-edit\"></span><span class=\"sr-only\">Edit</span></button>\n    <button type=\"button\" class=\"btn btn-default btn-danger btn-delete\"><span class=\"fa fa-remove\"></span><span class=\"sr-only\">Delete</span></button>\n  </div>\n</aside>";

    TransactionView.prototype.events = {
      "click": "toggleAside",
      "click .paid-check": "togglePaid",
      "click .btn-edit": "editTransaction",
      "click .btn-delete": "removeTransaction",
      "dblclick": "editTransaction"
    };

    TransactionView.prototype.editTransaction = function(ev) {
      this.editModalAccountView = new MyCoins.Views.Transactions.NewTransactionModalView({
        model: this.model
      });
      MyCoins.setCurrentModalView(this.editModalAccountView);
      return this.editModalAccountView.show();
    };

    TransactionView.prototype.togglePaid = function(ev) {
      ev.stopPropagation();
      this.model.togglePaid();
      return this.model.save();
    };

    TransactionView.prototype.removeTransaction = function() {
      return this.model.destroy();
    };

    TransactionView.prototype.initialize = function(options) {
      this.model.on("change:accountId", (function(_this) {
        return function(model, value) {
          if (value !== _this.model.previous("accountId")) {
            _this.remove();
            return _this.off();
          }
        };
      })(this));
      this.model.on("change:description", (function(_this) {
        return function(model, value) {
          return _this.$(".body .description").text(_this.model.get("description"));
        };
      })(this));
      this.model.on("change:value", (function(_this) {
        return function(model, value) {
          return _this.$(".body > .value").text(value.format() + " " + _this.model.get("currency"));
        };
      })(this));
      this.model.on("change:date", (function(_this) {
        return function(model, value) {
          return _this.$(".body .date .text").text(Date.create(value).format('{Weekday} {d} {Month}, {yyyy}'));
        };
      })(this));
      this.model.on("change:type", (function(_this) {
        return function(model, value) {
          return _this.$el.removeClass("income").removeClass("expense").addClass(model.get("type"));
        };
      })(this));
      this.model.on("change:paid", (function(_this) {
        return function(model, value) {
          _this.$(".body .paid-check").removeClass("paid").removeClass("unpaid");
          if (value) {
            return _this.$(".body .paid-check").addClass("paid");
          } else {
            return _this.$(".body .paid-check").addClass("unpaid");
          }
        };
      })(this));
      return this.model.on("destroy", (function(_this) {
        return function() {
          _this.remove();
          return _this.off();
        };
      })(this));
    };

    TransactionView.prototype.toggleAside = function(ev) {
      return this.$el.toggleClass("selected");
    };

    TransactionView.prototype.show = function() {
      return this.$el.fadeIn();
    };

    TransactionView.prototype.hide = function() {
      return this.$el.fadeOut();
    };

    TransactionView.prototype.render = function() {
      this.$el.append(this.template);
      if (this.model.get("paid")) {
        this.$(".body .paid-check").removeClass("unpaid").addClass("paid");
      } else {
        this.$(".body .paid-check").removeClass("paid").addClass("unpaid");
      }
      this.$(".description").text(this.model.get("description"));
      this.$(".body > .value").text(this.model.get("value").format() + " " + this.model.get("currency"));
      this.$(".date .text").text(Date.create(this.model.get("date")).format('{Weekday} {d} {Month}, {yyyy}'));
      this.$el.addClass("transaction");
      this.$el.addClass(this.model.get("type"));
      return this;
    };

    return TransactionView;

  })(Backbone.View);

  (_base6 = MyCoins.Views).Transactions || (_base6.Transactions = {});

  MyCoins.Views.Transactions.NewTransactionModalView = (function(_super) {
    __extends(NewTransactionModalView, _super);

    function NewTransactionModalView() {
      return NewTransactionModalView.__super__.constructor.apply(this, arguments);
    }

    NewTransactionModalView.prototype.template = "<article id=\"new-transaction-modal\" class=\"my-coins-modal\">\n  <header>Create a new Transaction</header>\n  <form class=\"box\">\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Account</span>\n        <div id=\"new-transaction-account-group\" class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\"></span> <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\"></ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Type</span>\n        <div id=\"new-transaction-type-group\" class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\">Income</span> <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n            <li><span>Income</span></li>\n            <li><span>Expense</span></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Category</span>\n        <div id=\"new-transaction-category-group\" class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\">None</span> <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n            <li data-category-id><span>None</span></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Description</span>\n        <div id=\"new-transaction-description-input\" class=\"input-group-btn\">\n          <input id=\"new-transaction-description\" type=\"text\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Paid</span>\n        <div id=\"new-transaction-paid-radio\" class=\"input-group-btn\">\n          <input id=\"new-transaction-paid\" type=\"checkbox\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Amount</span>\n        <div class=\"input-group input-dropdow\">\n          <input id=\"new-transaction-amount\" type=\"text\" placeholder=0>\n          <div id=\"new-transaction-currency\" class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\">NZD</span> <span class=\"caret\"></span></button>\n            <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n              <li class=\"account\" data-account-id=\"\"><span>ARS</span></li>\n              <li class=\"account\" data-account-id=\"\"><span>NZD</span></li>\n              <li class=\"account\" data-account-id=\"\"><span>USD</span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Date</span>\n        <div class=\"input-group date\">\n          <input type=\"text\" placeholder=\"YYYY/MM/DD\"><span class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span>\n        </div>\n      </div>\n    </div>\n\n\n  </form>\n  <footer>\n    <button id=\"new-modal-account-cancel-btn\" class=\"btn btn-default\">Cancel</button>\n    <button id=\"new-modal-account-done-btn\" class=\"btn btn-primary\">Done</button>\n  </footer>\n</article>";

    NewTransactionModalView.prototype.templateAccount = "<li class=\"account\" data-account-id=\"\"><span>New Account</span></li>";

    NewTransactionModalView.prototype.templateTransactionCategory = "<li class=\"transaction-category\" data-category-id=\"\"><span>New Account</span></li>";

    NewTransactionModalView.prototype.mode = "new";

    NewTransactionModalView.prototype.type = "expense";

    NewTransactionModalView.prototype.events = {
      "click #new-transaction-account-group .account": "clickAccount",
      "click #new-transaction-type-group li": "clickType",
      "click #new-transaction-category-group li": "clickCategory",
      "keydown #new-transaction-amount": "keydownAmount",
      "blur #new-transaction-description": "blurDescription",
      "keyup #new-transaction-amount": "keyupAmount",
      "click #new-modal-account-cancel-btn": "hide",
      "click #new-modal-account-done-btn": "submit"
    };

    NewTransactionModalView.prototype.initialize = function(options) {
      this.collection = MyCoins.transactionsCollection;
      if (options != null ? options.type : void 0) {
        this.type = options.type;
      }
      if (!(options != null ? options.model : void 0)) {
        this.model = new this.collection.model;
        return this.model.set("accountId", options.accountId);
      } else {
        return this.mode = "edit";
      }
    };

    NewTransactionModalView.prototype.clickAccount = function(ev) {
      var accountId;
      accountId = parseInt($(ev.target).closest(".account").attr("data-account-id"));
      return this.$("#new-transaction-account-group .btn:first-of-type .text").text(MyCoins.accountsCollection.findWhere({
        id: accountId
      }).get("name")).attr("data-account-id", accountId);
    };

    NewTransactionModalView.prototype.clickType = function(ev) {
      return this.$("#new-transaction-type-group .btn:first-of-type .text").text($(ev.target).closest("li span").text());
    };

    NewTransactionModalView.prototype.clickCategory = function(ev) {
      this.$("#new-transaction-category-group .btn:first-of-type .text").text($(ev.target).closest("li span").text());
      return this.$("#new-transaction-category-group .btn").attr("data-category-id", $(ev.target).closest("li").attr("data-category-id"));
    };

    NewTransactionModalView.prototype.show = function() {
      return $("#app-modal").fadeIn();
    };

    NewTransactionModalView.prototype.hide = function() {
      return $("#app-modal").fadeOut();
    };

    NewTransactionModalView.prototype.keydownAmount = function(ev) {
      var a, i, k, _i, _j;
      a = [8, 9, 13, 16, 17, 18, 20, 27, 35, 36, 37, 38, 39, 40, 45, 46, 91, 92];
      k = ev.which;
      for (i = _i = 48; _i <= 58; i = ++_i) {
        a.push(i);
      }
      for (i = _j = 96; _j <= 106; i = ++_j) {
        a.push(i);
      }
      if (!(a.indexOf(k) >= 0)) {
        return ev.preventDefault();
      }
    };

    NewTransactionModalView.prototype.keyupAmount = function(ev) {
      return $(ev.target).val(Number($(ev.target).val().replace(/[\,\.\s]/gi, '')).format());
    };

    NewTransactionModalView.prototype.blurDescription = function(ev) {
      return $(ev.target).val($(ev.target).val().trim());
    };

    NewTransactionModalView.prototype.submit = function(ev) {
      var value;
      this.$(".row").removeClass("error");
      if (this.$("#new-transaction-description").val().trim() === "") {
        return this.$("#new-transaction-description").closest(".row").addClass("error");
      } else {
        value = 0;
        if (this.$("#new-transaction-amount").val() !== "") {
          value = this.$("#new-transaction-amount").val();
        }
        this.model.set("accountId", parseInt(this.$("#new-transaction-account-group .btn:first-of-type .text").attr("data-account-id")));
        this.model.set("type", this.$("#new-transaction-type-group .btn:first-of-type .text").text().toLowerCase());
        if (this.$("#new-transaction-category-group .btn").attr("data-category-id")) {
          this.model.set("categoryId", this.$("#new-transaction-category-group .btn").attr("data-category-id"));
        }
        this.model.set("description", this.$("#new-transaction-description").val());
        this.model.set("paid", this.$("#new-transaction-paid").prop("checked"));
        this.model.set("value", Number(String(value).replace(/[\,\.\s]/gi, '')));
        this.model.set("date", this.$('.input-group.date').datepicker("getDate").format(Date.ISO8601_DATETIME));
        if (this.mode === "new") {
          this.collection.create(this.model);
          return this.hide();
        } else {
          this.model.save(this.model.attributes, {
            silent: true
          });
          this.collection.trigger("change");
          return this.hide();
        }
      }
    };

    NewTransactionModalView.prototype.render = function() {
      var _ref;
      this.$el.append(this.template);
      this.$("#new-transaction-account-group .btn:first-of-type .text").text(MyCoins.accountsCollection.findWhere({
        id: this.model.get("accountId")
      }).get("name")).attr("data-account-id", this.model.get("accountId"));
      MyCoins.accountsCollection.each((function(_this) {
        return function(account) {
          var $account;
          $account = $(_this.templateAccount);
          $account.attr("data-account-id", account.get("id"));
          $account.find("span").text(account.get("name"));
          return _this.$("#new-transaction-account-group .dropdown-menu").append($account);
        };
      })(this));
      MyCoins.transactionCategoriesCollection.each((function(_this) {
        return function(category) {
          var $category;
          $category = $(_this.templateTransactionCategory);
          $category.attr("data-category-id", category.get("id"));
          $category.find("span").text(category.get("name"));
          return _this.$("#new-transaction-category-group .dropdown-menu").append($category);
        };
      })(this));
      this.$('.input-group.date').datepicker({
        format: "yyyy/mm/dd",
        autoclose: true,
        todayHighlight: true
      });
      this.$('.input-group.date').datepicker("update", Date.create().format("yyyy/mm/dd"));
      if (this.mode === "new") {
        this.model.set("date", this.$('.input-group.date').datepicker("getDate").format(Date.ISO8601_DATETIME));
        this.$("#new-transaction-type-group .btn:first-of-type .text").text(this.type.capitalize());
        this.$("#new-transaction-paid").prop("checked", true);
      } else {
        this.$('header').text("Editing a Transaction");
        this.$("#new-transaction-account-group .btn:first-of-type .text").text(MyCoins.accountsCollection.findWhere({
          id: this.model.get("accountId")
        }).get("name"));
        this.$("#new-transaction-type-group .btn:first-of-type .text").text(this.model.get("type").capitalize());
        this.$("#new-transaction-category-group .btn:first-of-type .text").text(((_ref = MyCoins.transactionCategoriesCollection.get(this.model.get("categoryId"))) != null ? _ref.get("name") : void 0) || "None").attr("data-category-id", this.model.get("categoryId"));
        this.$("#new-transaction-description").val(this.model.get("description"));
        this.$("#new-transaction-paid").prop("checked", this.model.get("paid"));
        this.$("#new-transaction-amount").val(this.model.get("value").format());
        this.$('.input-group.date').datepicker("update", Date.create(this.model.get("date")).format("{yyyy}/{MM}/{dd}"));
      }
      $("body").on("click", (function(_this) {
        return function(ev) {
          return _this.$(".btn-group").removeClass("open");
        };
      })(this));
      return this;
    };

    return NewTransactionModalView;

  })(Backbone.View);

  (_base7 = MyCoins.Views).Budgets || (_base7.Budgets = {});

  MyCoins.Views.Budgets.NewBudgetModalView = (function(_super) {
    __extends(NewBudgetModalView, _super);

    function NewBudgetModalView() {
      return NewBudgetModalView.__super__.constructor.apply(this, arguments);
    }

    NewBudgetModalView.prototype.template = "<article id=\"new-budget-modal\" class=\"my-coins-modal\">\n  <header>Create a new Budget</header>\n  <form class=\"box\">\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Name</span>\n        <div id=\"new-budget-name-input\" class=\"input-group-btn\">\n          <input id=\"new-budget-name\" type=\"text\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Accounts to watch</span>\n        <div id=\"new-budget-account-group\" class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\"></span> <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n          </ul>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Categories to watch</span>\n        <div id=\"new-budget-category-group\" class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\"></span> <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n\n          </ul>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Amount</span>\n        <div class=\"input-group input-dropdow\">\n          <input id=\"new-budget-amount\" type=\"text\" placeholder=0>\n          <div id=\"new-budget-amount-dropdown\" class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\">NZD</span> <span class=\"caret\"></span></button>\n            <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n              <li><span>ARS</span></li>\n              <li><span>NZD</span></li>\n              <li><span>USD</span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Start Date</span>\n        <div class=\"input-group date\">\n          <input id=\"new-budget-start-date\" type=\"text\" placeholder=\"YYYY/MM/DD\"><span class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Repeat</span>\n        <div class=\"input-group input-dropdow\">\n          <input id=\"new-budget-repeat\" type=\"checkbox\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"input-group col-lg-12\">\n        <span class=\"input-group-addon\">Frequency</span>\n        <div class=\"input-group input-dropdow\">\n          <div id=\"new-budget-frequency\" class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"text\">Monthly</span> <span class=\"caret\"></span></button>\n            <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n              <li><span>Monthly</span></li>\n              <li><span>Yearly</span></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n  </form>\n  <footer>\n    <button id=\"new-modal-budget-cancel-btn\" class=\"btn btn-default\">Cancel</button>\n    <button id=\"new-modal-budget-done-btn\" class=\"btn btn-primary\">Done</button>\n  </footer>\n</article>";

    NewBudgetModalView.prototype.templateAccount = "<li class=\"account\" data-account-id=\"\"><span></span></li>";

    NewBudgetModalView.prototype.templateTransactionCategory = "<li class=\"display-table\">\n  <div class=\"input-group col-lg-12\">\n    <span class=\"input-group-addon\"></span>\n    <div class=\"input-group-btn\">\n      <input type=\"checkbox\">\n    </div>\n  </div>\n</li>";

    NewBudgetModalView.prototype.mode = "new";

    NewBudgetModalView.prototype.type = "expense";

    NewBudgetModalView.prototype.transactionCategories = [];

    NewBudgetModalView.prototype.events = {
      "click #new-budget-account-group .account": "clickAccount",
      "click #new-budget-category-group li": "clickCategory",
      "click #new-modal-budget-cancel-btn": "hide",
      "click #new-modal-budget-done-btn": "submit",
      "keydown #new-budget-amount": "keydownAmount",
      "keyup #new-budget-amount": "keyupAmount"
    };

    NewBudgetModalView.prototype.initialize = function(options) {
      if (options != null ? options.type : void 0) {
        this.type = options.type;
      }
      if (!(options != null ? options.model : void 0)) {
        return this.model = new MyCoins.budgetsCollection.model;
      } else {
        return this.mode = "edit";
      }
    };

    NewBudgetModalView.prototype.clickAccount = function(ev) {
      var accountId;
      accountId = parseInt($(ev.target).closest(".account").attr("data-account-id"));
      return this.$("#new-budget-account-group .btn:first-of-type .text").text(MyCoins.accountsCollection.findWhere({
        id: accountId
      }).get("name")).attr("data-account-id", accountId);
    };

    NewBudgetModalView.prototype.clickCategory = function(ev) {
      var $input;
      $input = $(ev.target).closest("li input");
      console.log($input, $(ev.target));
      if ($(ev.target) !== $input) {
        ev.stopPropagation();
        ev.preventDefault();
        console.log($input.prop("checked"));
        $input.prop("checked", true);
        this.$("#new-budget-category-group .btn:first-of-type .text").text($(ev.target).closest("li span").text());
        return this.$("#new-budget-category-group .btn").attr("data-category-id", $(ev.target).closest("li").attr("data-category-id"));
      }
    };

    NewBudgetModalView.prototype.show = function() {
      return $("#app-modal").fadeIn();
    };

    NewBudgetModalView.prototype.hide = function() {
      return $("#app-modal").fadeOut();
    };

    NewBudgetModalView.prototype.keydownAmount = function(ev) {
      var a, i, k, _i, _j;
      a = [8, 9, 13, 16, 17, 18, 20, 27, 35, 36, 37, 38, 39, 40, 45, 46, 91, 92];
      k = ev.which;
      for (i = _i = 48; _i <= 58; i = ++_i) {
        a.push(i);
      }
      for (i = _j = 96; _j <= 106; i = ++_j) {
        a.push(i);
      }
      if (!(a.indexOf(k) >= 0)) {
        return ev.preventDefault();
      }
    };

    NewBudgetModalView.prototype.keyupAmount = function(ev) {
      return $(ev.target).val(Number($(ev.target).val().replace(/[\,\.\s]/gi, '')).format());
    };

    NewBudgetModalView.prototype.blurDescription = function(ev) {
      return $(ev.target).val($(ev.target).val().trim());
    };

    NewBudgetModalView.prototype.submit = function(ev) {
      var value;
      this.$(".row").removeClass("error");
      value = 0;
      if (this.$("#new-transaction-amount").val() !== "") {
        value = this.$("#new-transaction-amount").val();
      }
      this.model.set("accountId", parseInt(this.$("#new-transaction-account-group .btn:first-of-type .text").attr("data-account-id")));
      if (this.$("#new-budget-category-group .btn").attr("data-category-id")) {
        this.model.set("categoryId", this.$("#new-budget-category-group .btn").attr("data-category-id"));
      }
      this.model.set("paid", this.$("#new-transaction-paid").prop("checked"));
      this.model.set("value", Number(String(value).replace(/[\,\.\s]/gi, '')));
      this.model.set("date", this.$('.input-group.date').datepicker("getDate").format(Date.ISO8601_DATETIME));
      if (this.mode === "new") {
        this.collection.create(this.model);
        return this.hide();
      } else {
        this.model.save(this.model.attributes, {
          silent: true
        });
        this.collection.trigger("change");
        return this.hide();
      }
    };

    NewBudgetModalView.prototype.render = function() {
      var category;
      this.$el.append(this.template);
      MyCoins.accountsCollection.each((function(_this) {
        return function(account) {
          var $account;
          $account = $(_this.templateAccount);
          $account.attr("data-account-id", account.get("id"));
          $account.find("span").text(account.get("name"));
          return _this.$("#new-budget-account-group .dropdown-menu").append($account);
        };
      })(this));
      MyCoins.transactionCategoriesCollection.each((function(_this) {
        return function(category) {
          var $category;
          $category = $(_this.templateTransactionCategory);
          $category.attr("data-category-id", category.get("id"));
          $category.find("span").text(category.get("name"));
          return _this.$("#new-budget-category-group .dropdown-menu").append($category);
        };
      })(this));
      this.$('.input-group.date').datepicker({
        format: "yyyy/mm/dd",
        autoclose: true,
        todayHighlight: true
      });
      this.$('.input-group.date').datepicker("update", Date.create().format("yyyy/mm/dd"));
      if (this.mode === "new") {
        this.$('header').text("Editing a Budget");
        category = "";
        switch (this.model.get("categoriesId").length) {
          case 0:
            category = "All";
            break;
          case 1:
            category = MyCoins.transactionCategoriesCollection.get(this.model.get("categoriesId")[0]);
            break;
          default:
            category = "Various";
        }
        this.$("#new-budget-category-group .btn:first-of-type .text").text(category);
        this.$("#new-transaction-amount").val(this.model.get("amount").format());
        this.$('.input-group.date').datepicker("update", Date.create(this.model.get("date")).format("{yyyy}/{MM}/{dd}"));
      }
      $("body").on("click", (function(_this) {
        return function(ev) {
          return _this.$(".btn-group").removeClass("open");
        };
      })(this));
      return this;
    };

    return NewBudgetModalView;

  })(Backbone.View);

  MyCoins.Models.Account = (function(_super) {
    __extends(Account, _super);

    function Account() {
      return Account.__super__.constructor.apply(this, arguments);
    }

    Account.prototype.defaults = function() {
      return {
        id: MyCoins.accountsCollection.nextOrder(),
        name: null,
        type: "cash",
        currency: "NZD"
      };
    };

    Account.prototype.initialize = function(options) {
      return this;
    };

    Account.prototype.balance = function() {
      var balance;
      balance = 0;
      MyCoins.transactionsCollection.where({
        accountId: this.get("id")
      }).each(function(transaction) {
        if (transaction.get("type") === "income") {
          return balance += transaction.get("value");
        } else {
          return balance -= transaction.get("value");
        }
      });
      return balance;
    };

    return Account;

  })(Backbone.Model);

  MyCoins.Collections.Accounts = (function(_super) {
    __extends(Accounts, _super);

    function Accounts() {
      return Accounts.__super__.constructor.apply(this, arguments);
    }

    Accounts.prototype.model = MyCoins.Models.Account;

    Accounts.prototype.localStorage = new Backbone.LocalStorage("Accounts");

    Accounts.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('id') + 1;
    };

    Accounts.prototype.comparator = function(account) {
      return account.get('id');
    };

    return Accounts;

  })(Backbone.Collection);

  MyCoins.Models.Transaction = (function(_super) {
    __extends(Transaction, _super);

    function Transaction() {
      return Transaction.__super__.constructor.apply(this, arguments);
    }

    Transaction.prototype.defaults = function() {
      return {
        id: MyCoins.transactionsCollection.nextOrder(),
        type: "expense",
        description: "Transaction-" + MyCoins.transactionsCollection.nextOrder(),
        categoryId: null,
        value: 0,
        accountId: null,
        paid: true,
        currency: "NZD"
      };
    };

    Transaction.prototype.initialize = function(options) {
      return this;
    };

    Transaction.prototype.togglePaid = function() {
      return this.set("paid", !this.get("paid"));
    };

    return Transaction;

  })(Backbone.Model);

  MyCoins.Collections.Transactions = (function(_super) {
    __extends(Transactions, _super);

    function Transactions() {
      return Transactions.__super__.constructor.apply(this, arguments);
    }

    Transactions.prototype.model = MyCoins.Models.Transaction;

    Transactions.prototype.localStorage = new Backbone.LocalStorage("Transactions");

    Transactions.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('id') + 1;
    };

    Transactions.prototype.comparator = function(account) {
      return account.get('id');
    };

    Transactions.prototype.balance = function() {
      var balance;
      balance = 0;
      this.each((function(_this) {
        return function(transaction) {
          if (transaction.get("type") === "income") {
            return balance += transaction.get("value");
          } else {
            return balance -= transaction.get("value");
          }
        };
      })(this));
      return balance;
    };

    Transactions.prototype.currency = function() {
      return "NZD";
    };

    return Transactions;

  })(Backbone.Collection);

  MyCoins.Models.TransactionCategory = (function(_super) {
    __extends(TransactionCategory, _super);

    function TransactionCategory() {
      return TransactionCategory.__super__.constructor.apply(this, arguments);
    }

    TransactionCategory.prototype.defaults = function() {
      return {
        id: MyCoins.transactionCategoriesCollection.nextOrder(),
        name: "",
        parentCategoryId: null
      };
    };

    TransactionCategory.prototype.initialize = function(options) {
      return this;
    };

    return TransactionCategory;

  })(Backbone.Model);

  MyCoins.Collections.TransactionCategories = (function(_super) {
    __extends(TransactionCategories, _super);

    function TransactionCategories() {
      return TransactionCategories.__super__.constructor.apply(this, arguments);
    }

    TransactionCategories.prototype.model = MyCoins.Models.TransactionCategory;

    TransactionCategories.prototype.localStorage = new Backbone.LocalStorage("TransactionCategories");

    TransactionCategories.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('id') + 1;
    };

    return TransactionCategories;

  })(Backbone.Collection);

  MyCoins.Models.Budget = (function(_super) {
    __extends(Budget, _super);

    function Budget() {
      return Budget.__super__.constructor.apply(this, arguments);
    }

    Budget.prototype.defaults = function() {
      return {
        id: MyCoins.accountsCollection.nextOrder(),
        name: null,
        amount: 0,
        categoriesId: [],
        date: null
      };
    };

    Budget.prototype.initialize = function(options) {
      return this;
    };

    return Budget;

  })(Backbone.Model);

  MyCoins.Collections.Budgets = (function(_super) {
    __extends(Budgets, _super);

    function Budgets() {
      return Budgets.__super__.constructor.apply(this, arguments);
    }

    Budgets.prototype.model = MyCoins.Models.Budget;

    Budgets.prototype.localStorage = new Backbone.LocalStorage("Budgets");

    Budgets.prototype.nextOrder = function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('id') + 1;
    };

    Budgets.prototype.comparator = function(account) {
      return account.get('id');
    };

    return Budgets;

  })(Backbone.Collection);

  MyCoins.Routers.Accounts = (function(_super) {
    __extends(Accounts, _super);

    function Accounts() {
      return Accounts.__super__.constructor.apply(this, arguments);
    }

    Accounts.prototype.initialize = function(options) {};

    Accounts.prototype.routes = {
      "accounts": "index",
      "account/:id/show": "show"
    };

    Accounts.prototype.index = function() {};

    Accounts.prototype.show = function(id) {
      var $content;
      this.showView = new MyCoins.Views.Accounts.ShowView({
        model: MyCoins.accountsCollection.get(id)
      });
      MyCoins.setCurrentContentView(this.showView);
      $content = $("#show-account-content");
      $content.width($("#app-content").innerWidth()).height($("#app-content").innerHeight() - 49 * 2).perfectScrollbar();
      return onResizeWindow(function() {
        return $content.width($("#app-content").innerWidth()).height($("#app-content").innerHeight() - 49 * 2).perfectScrollbar();
      });
    };

    return Accounts;

  })(Backbone.Router);

  MyCoins.Routers.Transactions = (function(_super) {
    __extends(Transactions, _super);

    function Transactions() {
      return Transactions.__super__.constructor.apply(this, arguments);
    }

    Transactions.prototype.initialize = function(options) {};

    Transactions.prototype.routes = {
      "transactions": "index",
      "transaction/:id/show": "show"
    };

    Transactions.prototype.index = function() {};

    Transactions.prototype.show = function(id) {
      return this.showView = new MyCoins.Views.Transactions.ShowView({
        id: id
      });
    };

    return Transactions;

  })(Backbone.Router);

  fakeData = function() {
    var t, transactionCategories, transactions, _i, _j, _len, _len1, _results;
    if (!MyCoins.transactionCategoriesCollection.length) {
      transactionCategories = ["Bills", "Car", "Clothing", "Health", "Housing", "Others", "Restaurants", "Taxes", "Transport", "Travels"];
      for (_i = 0, _len = transactionCategories.length; _i < _len; _i++) {
        t = transactionCategories[_i];
        MyCoins.transactionCategoriesCollection.create({
          name: t
        });
      }
    }
    if (!MyCoins.accountsCollection.length) {
      MyCoins.accountsCollection.create({
        name: "Cuenta Personal",
        type: "cash"
      });
      transactions = [
        {
          accountId: 1,
          date: "2014-06-01T00:00:00.000-03:00",
          description: "Sueldo",
          type: "income",
          value: 4000
        }, {
          accountId: 1,
          date: "2014-06-02T00:00:00.000-03:00",
          description: "Activesap",
          type: "income",
          value: 500
        }, {
          accountId: 1,
          date: "2014-06-03T00:00:00.000-03:00",
          description: "Matias",
          type: "expense",
          value: 1100
        }, {
          accountId: 1,
          date: "2014-07-01T00:00:00.000-03:00",
          description: "Sueldo",
          type: "income",
          value: 4000
        }, {
          accountId: 1,
          date: "2014-07-02T00:00:00.000-03:00",
          description: "Gomitas",
          type: "expense",
          value: 8500
        }, {
          accountId: 1,
          date: "2014-08-01T00:00:00.000-03:00",
          description: "Sueldo",
          type: "income",
          value: 4000
        }, {
          accountId: 1,
          date: "2014-08-01T00:00:00.000-03:00",
          description: "Venta riñon",
          type: "income",
          value: 200
        }
      ];
      _results = [];
      for (_j = 0, _len1 = transactions.length; _j < _len1; _j++) {
        t = transactions[_j];
        _results.push(MyCoins.transactionsCollection.create(t));
      }
      return _results;
    }
  };

  $(document).ready(function() {
    var $sidebarAccountWrapper, newAccountView, sidebarView;
    window.MyCoins = {};
    MyCoins.setCurrentModalView = function(view) {
      if (MyCoins.currentModalView) {
        MyCoins.currentModalView.remove();
        MyCoins.currentModalView.off();
      }
      $("#app-modal").append(view.render().el);
      return MyCoins.currentModalView = view;
    };
    MyCoins.setCurrentContentView = function(view) {
      if (MyCoins.currentContentView) {
        MyCoins.currentContentView.remove();
        MyCoins.currentContentView.off();
      }
      $("#app-content").append(view.render().el);
      return MyCoins.currentContentView = view;
    };
    MyCoins.accountsCollection = new MyCoins.Collections.Accounts;
    MyCoins.transactionCategoriesCollection = new MyCoins.Collections.TransactionCategories;
    MyCoins.transactionsCollection = new MyCoins.Collections.Transactions;
    MyCoins.budgetsCollection = new MyCoins.Collections.Budgets;
    MyCoins.accountsCollection.fetch({
      reset: true
    });
    MyCoins.transactionCategoriesCollection.fetch({
      reset: true
    });
    MyCoins.transactionsCollection.fetch({
      reset: true
    });
    MyCoins.budgetsCollection.fetch({
      reset: true
    });
    fakeData();
    sidebarView = new MyCoins.Views.Sidebar.ShowView;
    $("#app-sidebar").append(sidebarView.render().el);
    $sidebarAccountWrapper = $("#sidebar-accounts-nav-wrapper");
    $sidebarAccountWrapper.width($sidebarAccountWrapper.width()).height($sidebarAccountWrapper.height()).perfectScrollbar();
    MyCoins.accountsRounter = new MyCoins.Routers.Accounts;
    Backbone.history.start({
      pushState: true,
      root: "/#/"
    });
    $(document).on('click', 'a:not([data-bypass])', function(evt) {
      var href, protocol;
      href = $(this).attr('href');
      protocol = this.protocol + '//';
      if (href.slice(protocol.length) !== protocol) {
        evt.preventDefault();
        return Backbone.history.navigate(href, true);
      }
    });
    if (MyCoins.accountsCollection.length > 0) {
      return Backbone.history.navigate("account/1/show", true);
    } else {
      newAccountView = new MyCoins.Views.Accounts.NewView({
        collection: MyCoins.accountsCollection
      });
      return MyCoins.setCurrentContentView(newAccountView);
    }
  });

}).call(this);
